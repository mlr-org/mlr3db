[{"path":"https://mlr3db.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michel Lang. Maintainer, author. Lona Koers. Author.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lang M, Koers L (2025). mlr3db: Data Base Backend 'mlr3'. R package version 0.5.1-9000, https:///mlr3db.mlr-org.com.","code":"@Manual{,   title = {mlr3db: Data Base Backend for 'mlr3'},   author = {Michel Lang and Lona Koers},   year = {2025},   note = {R package version 0.5.1-9000},   url = {https:///mlr3db.mlr-org.com}, }"},{"path":"https://mlr3db.mlr-org.com/dev/index.html","id":"mlr3db","dir":"","previous_headings":"","what":"Data Base Backend for mlr3","title":"Data Base Backend for mlr3","text":"Package website: release | dev Extends mlr3 package DataBackend transparently work databases. Two additional backends currently implemented: DataBackendDplyr: Relies internally abstraction dplyr dbplyr. allows working broad range DBMS, SQLite, MySQL, MariaDB, PostgreSQL. DataBackendDuckDB: Connector duckdb. includes support Parquet files (see example ). construct backends, establish connection DBMS DBI package. serverless SQLite DuckDB, provide converters as_sqlite_backend() as_duckdb_backend().","code":""},{"path":"https://mlr3db.mlr-org.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Base Backend for mlr3","text":"can install released version mlr3db CRAN : development version GitHub :","code":"install.packages(\"mlr3db\") # install.packages(\"devtools\") devtools::install_github(\"mlr-org/mlr3db\")"},{"path":[]},{"path":"https://mlr3db.mlr-org.com/dev/index.html","id":"databackenddplyr","dir":"","previous_headings":"Example","what":"DataBackendDplyr","title":"Data Base Backend for mlr3","text":"","code":"library(\"mlr3db\") #> Loading required package: mlr3  # Create a classification task: task = tsk(\"spam\")  # Convert the task backend from a in-memory backend (DataBackendDataTable) # to an out-of-memory SQLite backend via DataBackendDplyr. # A temporary directory is used here to store the database files. task$backend = as_sqlite_backend(task$backend, path = tempfile())  # Resample a classification tree using a 3-fold CV. # The requested data will be queried and fetched from the database in the background. resample(task, lrn(\"classif.rpart\"), rsmp(\"cv\", folds = 3)) #> <ResampleResult> of 3 iterations #> * Task: spam #> * Learner: classif.rpart #> * Warnings: 0 in 0 iterations #> * Errors: 0 in 0 iterations"},{"path":"https://mlr3db.mlr-org.com/dev/index.html","id":"databackendduckdb","dir":"","previous_headings":"Example","what":"DataBackendDuckDB","title":"Data Base Backend for mlr3","text":"","code":"library(\"mlr3db\")  # Get an example parquet file from the package install directory: # spam dataset (tsk(\"spam\")) stored as parquet file file = system.file(file.path(\"extdata\", \"spam.parquet\"), package = \"mlr3db\")  # Create a backend on the file backend = as_duckdb_backend(file)  # Construct classification task on the constructed backend task = as_task_classif(backend, target = \"type\")  # Resample a classification tree using a 3-fold CV. # The requested data will be queried and fetched from the database in the background. resample(task, lrn(\"classif.rpart\"), rsmp(\"cv\", folds = 3)) #> <ResampleResult> of 3 iterations #> * Task: backend #> * Learner: classif.rpart #> * Warnings: 0 in 0 iterations #> * Errors: 0 in 0 iterations"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":null,"dir":"Reference","previous_headings":"","what":"DataBackend for dplyr/dbplyr — DataBackendDplyr","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"mlr3::DataBackend using dplyr::tbl() packages dplyr/dbplyr. includes tibbles abstract database connections interfaced dbplyr. latter allows mlr3::Tasks interface --memory database.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"mlr3::DataBackend -> DataBackendDplyr","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"levels (named list()) List (named column names) factor levels character(). Used auto-convert character columns factor variables. connector (function()) Function called re-connect case connection became invalid.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"rownames (integer()) Returns vector distinct row identifiers, .e. contents primary key column. colnames (character()) Returns vector column names, including primary key column. nrow (integer(1)) Number rows (observations). ncol (integer(1)) Number columns (variables), including primary key column. valid (logical(1)) Returns NA data inherits \"tbl_sql\" (.e., real SQL data base). Returns result DBI::dbIsValid() otherwise.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"mlr3::DataBackend$format() mlr3::DataBackend$print()","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"DataBackendDplyr$new() DataBackendDplyr$finalize() DataBackendDplyr$data() DataBackendDplyr$head() DataBackendDplyr$distinct() DataBackendDplyr$missings()","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"Creates backend dplyr::tbl() object.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"","code":"DataBackendDplyr$new(   data,   primary_key,   strings_as_factors = TRUE,   connector = NULL )"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"data (dplyr::tbl()) data object. Instead calling constructor , can call mlr3::as_data_backend() dplyr::tbl(). Note objects class \"tbl_lazy\" converted DataBackendDplyr (includes connectors dbplyr). Local \"tbl\" objects tibbles converted DataBackendDataTable. primary_key (character(1)) Name primary key column. strings_as_factors (logical(1) || character()) Either character vector column names convert factors, single logical flag: FALSE, column converted, TRUE string columns (except primary key). conversion, backend queried distinct values respective columns construction levels stored $levels. connector (function())\\cr NULL`, function re-connects database case connection become invalid. Database connections can become invalid due timeouts backend serialized file system de-serialized . round trip often performed parallelization, e.g. send objects remote workers. DBI::dbIsValid() called validate connection. function must return just connection, dplyr::tbl() object! Note function serialized together backend, including possible sensitive information login credentials. can retrieved stored mlr3::DataBackend/mlr3::Task. protect credentials, recommended use secret package.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"method-finalize-","dir":"Reference","previous_headings":"","what":"Method finalize()","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"Finalizer disconnects database. called garbage collection instance.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"","code":"DataBackendDplyr$finalize()"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"logical(1), return value DBI::dbDisconnect().","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"method-data-","dir":"Reference","previous_headings":"","what":"Method data()","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"Returns slice data. Calls dplyr::filter() dplyr::select() table converts data.table::data.table(). rows must addressed vector primary key values, columns must referred via column names. Queries rows matching row id queries columns matching column name silently ignored. Rows guaranteed returned order rows, columns may returned arbitrary order. Duplicated row ids result duplicated rows, duplicated column names lead exception.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"","code":"DataBackendDplyr$data(rows, cols, data_format = \"data.table\")"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"rows integer() Row indices. cols character() Column names. data_format (character(1)) Desired data format, e.g. \"data.table\" \"Matrix\".","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"Retrieve first n rows.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"","code":"DataBackendDplyr$head(n = 6L)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"n (integer(1)) Number rows.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"data.table::data.table() first n rows.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"method-distinct-","dir":"Reference","previous_headings":"","what":"Method distinct()","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"Returns named list vectors distinct values column specified. na_rm TRUE, missing values removed returned vectors distinct values. Non-existing rows columns silently ignored.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"","code":"DataBackendDplyr$distinct(rows, cols, na_rm = TRUE)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"rows integer() Row indices. cols character() Column names. na_rm logical(1) Whether remove NAs .","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"Named list() distinct values.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"method-missings-","dir":"Reference","previous_headings":"","what":"Method missings()","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"Returns number missing values per column specified slice data. Non-existing rows columns silently ignored.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"","code":"DataBackendDplyr$missings(rows, cols)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"rows integer() Row indices. cols character() Column names.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"Total missing values per column (named numeric()).","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDplyr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataBackend for dplyr/dbplyr — DataBackendDplyr","text":"","code":"if (mlr3misc::require_namespaces(c(\"tibble\", \"RSQLite\", \"dbplyr\"), quietly = TRUE)) {   # Backend using a in-memory tibble   data = tibble::as_tibble(iris)   data$Sepal.Length[1:30] = NA   data$row_id = 1:150   b = DataBackendDplyr$new(data, primary_key = \"row_id\")    # Object supports all accessors of DataBackend   print(b)   b$nrow   b$ncol   b$colnames   b$data(rows = 100:101, cols = \"Species\")   b$distinct(b$rownames, \"Species\")    # Classification task using this backend   task = mlr3::TaskClassif$new(id = \"iris_tibble\", backend = b, target = \"Species\")   print(task)   head(task)    # Create a temporary SQLite database   con = DBI::dbConnect(RSQLite::SQLite(), \":memory:\")   dplyr::copy_to(con, data)   tbl = dplyr::tbl(con, \"data\")    # Define a backend on a subset of the database: do not use column \"Sepal.Width\"   tbl = dplyr::select_at(tbl, setdiff(colnames(tbl), \"Sepal.Width\"))   tbl = dplyr::filter(tbl, row_id %in% 1:120) # Use only first 120 rows   b = DataBackendDplyr$new(tbl, primary_key = \"row_id\")   print(b)    # Query disinct values   b$distinct(b$rownames, \"Species\")    # Query number of missing values   b$missings(b$rownames, b$colnames)    # Note that SQLite does not support factors, column Species has been converted to character   lapply(b$head(), class)    # Cleanup   rm(tbl)   DBI::dbDisconnect(con) } #> <DataBackendDplyr> (150x6) #>  Sepal.Length Sepal.Width Petal.Length Petal.Width Species row_id #>         <num>       <num>        <num>       <num>  <fctr>  <int> #>            NA         3.5          1.4         0.2  setosa      1 #>            NA         3.0          1.4         0.2  setosa      2 #>            NA         3.2          1.3         0.2  setosa      3 #>            NA         3.1          1.5         0.2  setosa      4 #>            NA         3.6          1.4         0.2  setosa      5 #>            NA         3.9          1.7         0.4  setosa      6 #> [...] (144 rows omitted) #> Warning: DataBackend$data_formats is deprecated and will be removed in the future. #> <TaskClassif:iris_tibble> (150 x 5) #> * Target: Species #> * Properties: multiclass #> * Features (4): #>   - dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #> <DataBackendDplyr> (120x5) #>  Sepal.Length Petal.Length Petal.Width Species row_id #>         <num>        <num>       <num>  <fctr>  <int> #>            NA          1.4         0.2  setosa      1 #>            NA          1.4         0.2  setosa      2 #>            NA          1.3         0.2  setosa      3 #>            NA          1.5         0.2  setosa      4 #>            NA          1.4         0.2  setosa      5 #>            NA          1.7         0.4  setosa      6 #> [...] (114 rows omitted)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":null,"dir":"Reference","previous_headings":"","what":"DataBackend for DuckDB — DataBackendDuckDB","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"mlr3::DataBackend duckdb. Can easily constructed as_duckdb_backend().","code":""},{"path":[]},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"mlr3::DataBackend -> DataBackendDuckDB","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"levels (named list()) List (named column names) factor levels character(). Used auto-convert character columns factor variables. connector (function()) Function called re-connect case connection became invalid. table (character(1)) Data base table view operate .","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"table_info (data.frame()) Data frame returned pragma table_info(). rownames (integer()) Returns vector distinct row identifiers, .e. contents primary key column. colnames (character()) Returns vector column names, including primary key column. nrow (integer(1)) Number rows (observations). ncol (integer(1)) Number columns (variables), including primary key column. valid (logical(1)) Returns NA data inherits \"tbl_sql\" (.e., real SQL data base). Returns result DBI::dbIsValid() otherwise.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"mlr3::DataBackend$format() mlr3::DataBackend$print()","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"DataBackendDuckDB$new() DataBackendDuckDB$finalize() DataBackendDuckDB$data() DataBackendDuckDB$head() DataBackendDuckDB$distinct() DataBackendDuckDB$missings()","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"Creates backend duckdb::duckdb() database.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"","code":"DataBackendDuckDB$new(   data,   table,   primary_key,   strings_as_factors = TRUE,   connector = NULL )"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"data (connection) connection created DBI::dbConnect(). constructed manually (via helper function as_duckdb_backend(), make sure exists (unique) index key column. table (character(1)) Table view operate . primary_key (character(1)) Name primary key column. strings_as_factors (logical(1) || character()) Either character vector column names convert factors, single logical flag: FALSE, column converted, TRUE string columns (except primary key). conversion, backend queried distinct values respective columns construction levels stored $levels. connector (function())\\cr NULL`, function re-connects database case connection become invalid. Database connections can become invalid due timeouts backend serialized file system de-serialized . round trip often performed parallelization, e.g. send objects remote workers. DBI::dbIsValid() called validate connection. function must return just connection, dplyr::tbl() object! Note function serialized together backend, including possible sensitive information login credentials. can retrieved stored mlr3::DataBackend/mlr3::Task. protect credentials, recommended use secret package.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"method-finalize-","dir":"Reference","previous_headings":"","what":"Method finalize()","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"Finalizer disconnects database. called garbage collection instance.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"","code":"DataBackendDuckDB$finalize()"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"logical(1), return value DBI::dbDisconnect().","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"method-data-","dir":"Reference","previous_headings":"","what":"Method data()","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"Returns slice data. rows must addressed vector primary key values, columns must referred via column names. Queries rows matching row id queries columns matching column name silently ignored. Rows guaranteed returned order rows, columns may returned arbitrary order. Duplicated row ids result duplicated rows, duplicated column names lead exception.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"","code":"DataBackendDuckDB$data(rows, cols, data_format = \"data.table\")"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"rows integer() Row indices. cols character() Column names. data_format (character(1)) Desired data format, e.g. \"data.table\" \"Matrix\".","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"Retrieve first n rows.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"","code":"DataBackendDuckDB$head(n = 6L)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"n (integer(1)) Number rows.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"data.table::data.table() first n rows.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"method-distinct-","dir":"Reference","previous_headings":"","what":"Method distinct()","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"Returns named list vectors distinct values column specified. na_rm TRUE, missing values removed returned vectors distinct values. Non-existing rows columns silently ignored.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"","code":"DataBackendDuckDB$distinct(rows, cols, na_rm = TRUE)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"rows integer() Row indices. cols character() Column names. na_rm logical(1) Whether remove NAs .","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"Named list() distinct values.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"method-missings-","dir":"Reference","previous_headings":"","what":"Method missings()","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"Returns number missing values per column specified slice data. Non-existing rows columns silently ignored.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"","code":"DataBackendDuckDB$missings(rows, cols)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"rows integer() Row indices. cols character() Column names.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendDuckDB.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for DuckDB — DataBackendDuckDB","text":"Total missing values per column (named numeric()).","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":null,"dir":"Reference","previous_headings":"","what":"DataBackend for Polars — DataBackendPolars","title":"DataBackend for Polars — DataBackendPolars","text":"mlr3::DataBackend using polars::RPolarsLazyFrame package polars. Can easily constructed as_polars_backend(). mlr3::Tasks can interface --memory files polars::RPolarsLazyFrame imported using polars::scan_x function. Streaming, polars alpha feature, always enabled, used applicable. connector required can useful e.g. scanning larger memory files","code":""},{"path":[]},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"DataBackend for Polars — DataBackendPolars","text":"mlr3::DataBackend -> DataBackendPolars","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"DataBackend for Polars — DataBackendPolars","text":"levels (named list()) List (named column names) factor levels character(). Used auto-convert character columns factor variables. connector (function()) Function called re-connect case connection became invalid.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"DataBackend for Polars — DataBackendPolars","text":"rownames (integer()) Returns vector distinct row identifiers, .e. contents primary key column. colnames (character()) Returns vector column names, including primary key column. nrow (integer(1)) Number rows (observations). ncol (integer(1)) Number columns (variables), including primary key column.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"DataBackend for Polars — DataBackendPolars","text":"mlr3::DataBackend$format() mlr3::DataBackend$print()","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DataBackend for Polars — DataBackendPolars","text":"DataBackendPolars$new() DataBackendPolars$data() DataBackendPolars$head() DataBackendPolars$distinct() DataBackendPolars$missings()","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DataBackend for Polars — DataBackendPolars","text":"Creates backend polars::RPolarsDataFrame object.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for Polars — DataBackendPolars","text":"","code":"DataBackendPolars$new(   data,   primary_key,   strings_as_factors = TRUE,   connector = NULL )"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for Polars — DataBackendPolars","text":"data (polars::RPolarsLazyFrame) data object. Instead calling constructor , please call mlr3::as_data_backend() polars::RPolarsLazyFrame polars::RPolarsDataFrame. Note polars::RPolarsLazyFrames converted DataBackendPolars. polars::RPolarsDataFrame objects without lazy execution converted DataBackendDataTable. primary_key (character(1)) Name primary key column. polars natively support primary keys, uniqueness primary key column expected enforced. strings_as_factors (logical(1) || character()) Either character vector column names convert factors, single logical flag: FALSE, column converted, TRUE string columns (except primary key). conversion, backend queried distinct values respective columns construction levels stored $levels. connector (function()) Optional function called re-connect e.g. source file case connection became invalid.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"method-data-","dir":"Reference","previous_headings":"","what":"Method data()","title":"DataBackend for Polars — DataBackendPolars","text":"Returns slice data. rows must addressed vector primary key values, columns must referred via column names. Queries rows matching row id queries columns matching column name silently ignored.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for Polars — DataBackendPolars","text":"","code":"DataBackendPolars$data(rows, cols)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for Polars — DataBackendPolars","text":"rows (integer()) Row indices. cols (character()) Column names.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"DataBackend for Polars — DataBackendPolars","text":"Retrieve first n rows.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for Polars — DataBackendPolars","text":"","code":"DataBackendPolars$head(n = 6L)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for Polars — DataBackendPolars","text":"n (integer(1)) Number rows.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for Polars — DataBackendPolars","text":"data.table::data.table() first n rows.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"method-distinct-","dir":"Reference","previous_headings":"","what":"Method distinct()","title":"DataBackend for Polars — DataBackendPolars","text":"Returns named list vectors distinct values column specified. na_rm TRUE, missing values removed returned vectors distinct values. Non-existing rows columns silently ignored.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for Polars — DataBackendPolars","text":"","code":"DataBackendPolars$distinct(rows, cols, na_rm = TRUE)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for Polars — DataBackendPolars","text":"rows (integer()) Row indices. cols (character()) Column names. na_rm (logical(1)) Whether remove NAs .","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for Polars — DataBackendPolars","text":"Named list() distinct values.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"method-missings-","dir":"Reference","previous_headings":"","what":"Method missings()","title":"DataBackend for Polars — DataBackendPolars","text":"Returns number missing values per column specified slice data. Non-existing rows columns silently ignored.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"DataBackend for Polars — DataBackendPolars","text":"","code":"DataBackendPolars$missings(rows, cols)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataBackend for Polars — DataBackendPolars","text":"rows (integer()) Row indices. cols (character()) Column names.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"DataBackend for Polars — DataBackendPolars","text":"Total missing values per column (named numeric()).","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/DataBackendPolars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DataBackend for Polars — DataBackendPolars","text":"","code":"if (mlr3misc::require_namespaces(\"polars\", quietly = TRUE)) {   # Backend using a in-memory data set   data = iris   data$Sepal.Length[1:30] = NA   data$row_id = 1:150   data = polars::as_polars_lf(data)   b = DataBackendPolars$new(data, primary_key = \"row_id\")    # Object supports all accessors of DataBackend   print(b)   b$nrow   b$ncol   b$colnames   b$data(rows = 100:101, cols = \"Species\")   b$distinct(b$rownames, \"Species\")    # Classification task using this backend   task = mlr3::TaskClassif$new(id = \"iris_tibble\", backend = b, target = \"Species\")   print(task)   head(task)    # Write a parquet file to scan   data$collect()$write_parquet(\"iris.parquet\")   data = polars::pl$scan_parquet(\"iris.parquet\")    # Backend that re-reads the parquet file if the connection fails   b = DataBackendPolars$new(data, \"row_id\",                             connector = function() polars::pl$scan_parquet(\"iris.parquet\"))   print(b)    # Define a backend on a subset of the database: do not use column \"Sepal.Width\"   data = data$select(     polars::pl$col(setdiff(colnames(data), \"Sepal.Width\"))   )$filter(     polars::pl$col(\"row_id\")$is_in(1:120) # Use only first 120 rows   )    # Backend with only scanned data   b = DataBackendPolars$new(data, \"row_id\", strings_as_factors = TRUE)   print(b)    # Query disinct values   b$distinct(b$rownames, \"Species\")    # Query number of missing values   b$missings(b$rownames, b$colnames)    # Cleanup   if (file.exists(\"iris.parquet\")) {     file.remove(\"iris.parquet\")   } } #> <DataBackendPolars> (150x6) #>  Sepal.Length Sepal.Width Petal.Length Petal.Width Species row_id #>         <num>       <num>        <num>       <num>  <fctr>  <int> #>            NA         3.5          1.4         0.2  setosa      1 #>            NA         3.0          1.4         0.2  setosa      2 #>            NA         3.2          1.3         0.2  setosa      3 #>            NA         3.1          1.5         0.2  setosa      4 #>            NA         3.6          1.4         0.2  setosa      5 #>            NA         3.9          1.7         0.4  setosa      6 #> [...] (144 rows omitted) #> <TaskClassif:iris_tibble> (150 x 5) #> * Target: Species #> * Properties: multiclass #> * Features (4): #>   - dbl (4): Petal.Length, Petal.Width, Sepal.Length, Sepal.Width #> <DataBackendPolars> (150x6) #>  Sepal.Length Sepal.Width Petal.Length Petal.Width Species row_id #>         <num>       <num>        <num>       <num>  <fctr>  <int> #>            NA         3.5          1.4         0.2  setosa      1 #>            NA         3.0          1.4         0.2  setosa      2 #>            NA         3.2          1.3         0.2  setosa      3 #>            NA         3.1          1.5         0.2  setosa      4 #>            NA         3.6          1.4         0.2  setosa      5 #>            NA         3.9          1.7         0.4  setosa      6 #> [...] (144 rows omitted) #> <DataBackendPolars> (120x5) #>  Sepal.Length Petal.Length Petal.Width Species row_id #>         <num>        <num>       <num>  <fctr>  <int> #>            NA          1.4         0.2  setosa      1 #>            NA          1.4         0.2  setosa      2 #>            NA          1.3         0.2  setosa      3 #>            NA          1.5         0.2  setosa      4 #>            NA          1.4         0.2  setosa      5 #>            NA          1.7         0.4  setosa      6 #> [...] (114 rows omitted) #> [1] TRUE"},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_duckdb_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to DuckDB Backend — as_duckdb_backend","title":"Convert to DuckDB Backend — as_duckdb_backend","text":"Converts DataBackendDuckDB using duckdb database, depending input type: data.frame: Creates new DataBackendDataTable first using as_data_backend(), proceeds conversion DataBackendDataTable DataBackendDuckDB. mlr3::DataBackend: Creates new DuckDB data base specified path. filename determined hash DataBackend. file already exists, connection existing database established existing files reused. created backend automatically reconnects database connection lost, e.g. object serialized filesystem restored different R session. requirement path change path accessible workers.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_duckdb_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to DuckDB Backend — as_duckdb_backend","text":"","code":"as_duckdb_backend(data, path = getOption(\"mlr3db.duckdb_dir\", \":temp:\"), ...)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_duckdb_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to DuckDB Backend — as_duckdb_backend","text":"data (data.frame() | mlr3::DataBackend) See description. path (character(1)) Path DuckDB databases. Either valid path directory created exists, one special strings: \":temp:\" (default): Temporary directory R session used, see tempdir(). Note directory removed shutdown R session. Also note usually work parallelization remote workers. Set custom path instead use special string \":user:\" instead. \":user:\": User cache directory returned R_user_dir() used. default argument can configured via option \"mlr3db.sqlite_dir\" \"mlr3db.duckdb_dir\", respectively. database files use hash DataBackend filename file extension \".duckdb\" \".sqlite\". database already exists file system, converters just established new read-connection. ... () Additional arguments, passed DataBackendDuckDB.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_duckdb_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to DuckDB Backend — as_duckdb_backend","text":"DataBackendDuckDB Task.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_polars_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Polars Backend — as_polars_backend","title":"Convert to Polars Backend — as_polars_backend","text":"Converts DataBackendPolars using polars database, depending input type: data.frame: Creates new DataBackendDataTable first using as_data_backend(), proceeds conversion DataBackendDataTable DataBackendPolars. mlr3::DataBackend: Creates new DataBackendPolars. automatic connection origin file set. data obtained using scanning data streamed, connector can set manually required.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_polars_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Polars Backend — as_polars_backend","text":"","code":"as_polars_backend(data, streaming = FALSE, ...)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_polars_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Polars Backend — as_polars_backend","text":"data (data.frame() | mlr3::DataBackend) See description. streaming (logical(1)) Whether data scanned (recommended large data sets) streamed every DataBackendPolars operation loaded memory completely. ... () Additional arguments, passed DataBackendPolars.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_polars_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to Polars Backend — as_polars_backend","text":"DataBackendPolars Task.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_sqlite_backend.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to SQLite Backend — as_sqlite_backend","title":"Convert to SQLite Backend — as_sqlite_backend","text":"Converts DataBackendDplyr using RSQLite database, depending input type: data.frame: Creates new DataBackendDataTable first using as_data_backend(), proceeds conversion DataBackendDataTable DataBackendDplyr. mlr3::DataBackend: Creates new SQLite data base specified path. filename determined hash DataBackend. file already exists, connection existing database established existing files reused. created backend automatically reconnects database connection lost, e.g. object serialized filesystem restored different R session. requirement path change path accessible workers.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_sqlite_backend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to SQLite Backend — as_sqlite_backend","text":"","code":"as_sqlite_backend(data, path = getOption(\"mlr3db.sqlite_dir\", \":temp:\"), ...)"},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_sqlite_backend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to SQLite Backend — as_sqlite_backend","text":"data (data.frame() | mlr3::DataBackend See description. path (character(1)) Path DuckDB databases. Either valid path directory created exists, one special strings: \":temp:\" (default): Temporary directory R session used, see tempdir(). Note directory removed shutdown R session. Also note usually work parallelization remote workers. Set custom path instead use special string \":user:\" instead. \":user:\": User cache directory returned R_user_dir() used. default argument can configured via option \"mlr3db.sqlite_dir\" \"mlr3db.duckdb_dir\", respectively. database files use hash DataBackend filename file extension \".duckdb\" \".sqlite\". database already exists file system, converters just established new read-connection. ... () Additional arguments, passed DataBackendDplyr.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/as_sqlite_backend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to SQLite Backend — as_sqlite_backend","text":"DataBackendDplyr Task.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/mlr3db-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3db: Data Base Backend for 'mlr3' — mlr3db-package","title":"mlr3db: Data Base Backend for 'mlr3' — mlr3db-package","text":"Extends 'mlr3' package backend transparently work databases 'SQLite', 'DuckDB', 'MySQL', 'MariaDB', 'PostgreSQL'. package provides two additional backends: 'DataBackendDplyr' relies abstraction package 'dbplyr' interact DBMS. 'DataBackendDuckDB' operates 'DuckDB' data bases also Apache Parquet files.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/reference/mlr3db-package.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"mlr3db: Data Base Backend for 'mlr3' — mlr3db-package","text":"mlr3db.sqlite_dir: Default directory store SQLite databases constructed as_sqlite_backend().. mlr3db.sqlite_dir: Default directory store DuckDB databases constructed as_duckdb_backend()..","code":""},{"path":[]},{"path":"https://mlr3db.mlr-org.com/dev/reference/mlr3db-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3db: Data Base Backend for 'mlr3' — mlr3db-package","text":"Maintainer: Michel Lang michellang@gmail.com (ORCID) Authors: Lona Koers lona.koers@gmail.com","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-052","dir":"Changelog","previous_headings":"","what":"mlr3db 0.5.2","title":"mlr3db 0.5.2","text":"CRAN release: 2023-11-04 Bugfix: DataBackendDuckDB calculated missing values incorrectly. Compatibility future versions dbplyr (#35).","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-051","dir":"Changelog","previous_headings":"","what":"mlr3db 0.5.1","title":"mlr3db 0.5.1","text":"CRAN release: 2023-10-17 Compatibility new duckdb version (#36).","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-050","dir":"Changelog","previous_headings":"","what":"mlr3db 0.5.0","title":"mlr3db 0.5.0","text":"CRAN release: 2022-08-08 Support parquet files Backend via DuckDB. New converter as_duckdb_backend().","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-042","dir":"Changelog","previous_headings":"","what":"mlr3db 0.4.2","title":"mlr3db 0.4.2","text":"CRAN release: 2021-11-17 Compatibility fixes new duckdb version.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-041","dir":"Changelog","previous_headings":"","what":"mlr3db 0.4.1","title":"mlr3db 0.4.1","text":"CRAN release: 2021-04-13 Temporarily disabled tests overcome regressions duckdb.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-040","dir":"Changelog","previous_headings":"","what":"mlr3db 0.4.0","title":"mlr3db 0.4.0","text":"CRAN release: 2021-03-09 Added show_query() method DataBackendDplyr (#4). reconnector automatically added as_data_backend() objects type tbl_SQLiteConnection tbl_duckdb_connection.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-030","dir":"Changelog","previous_headings":"","what":"mlr3db 0.3.0","title":"mlr3db 0.3.0","text":"CRAN release: 2020-12-16 New backend DataBackendDuckDB. dplyr now optional (moved imports suggests).","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-020","dir":"Changelog","previous_headings":"","what":"mlr3db 0.2.0","title":"mlr3db 0.2.0","text":"CRAN release: 2020-09-28 Set primary key SQLite databases generated data frames. Set reconnector SQLite databases generated data frames. Resolved warning signaled dplyr-1.0.0.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-015","dir":"Changelog","previous_headings":"","what":"mlr3db 0.1.5","title":"mlr3db 0.1.5","text":"CRAN release: 2020-02-19 as_data_backend() method construct DataBackendDplyr now specialized operate objects type \"tbl_lazy\" (\"tbl\" ). way, local \"tbl\" objects tibbles converted DataBackendDataTable mlr3::as_data_backend.data.frame().","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-014","dir":"Changelog","previous_headings":"","what":"mlr3db 0.1.4","title":"mlr3db 0.1.4","text":"CRAN release: 2020-02-05 Connections can now automatically re-connected via user-provided function. DataBackendDplyr now finalizer automatically disconnects database connection garbage collection.","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-013","dir":"Changelog","previous_headings":"","what":"mlr3db 0.1.3","title":"mlr3db 0.1.3","text":"CRAN release: 2019-10-29 construction DataBackendDplyr, can now select columns converted string factor. simplifies work SQL databases naturally support factors (level information lost transaction).","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-012","dir":"Changelog","previous_headings":"","what":"mlr3db 0.1.2","title":"mlr3db 0.1.2","text":"CRAN release: 2019-08-26 Fixed $distinct() return missing values per default. Added na_rm argument $distinct(). Renamed as_sqlite() as_sqlite_backend()","code":""},{"path":"https://mlr3db.mlr-org.com/dev/news/index.html","id":"mlr3db-011","dir":"Changelog","previous_headings":"","what":"mlr3db 0.1.1","title":"mlr3db 0.1.1","text":"CRAN release: 2019-08-01 Initial release.","code":""}]
