% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DataBackendDplyr.R
\name{DataBackendDplyr}
\alias{DataBackendDplyr}
\title{DataBackend for dplyr/dbplyr}
\description{
A \link[mlr3:DataBackend]{mlr3::DataBackend} using \code{\link[dplyr:tbl]{tbl}} from packages \pkg{dplyr}/\pkg{dbplyr}.
Allows to connect a \link[mlr3:Task]{Task} to a out-of-memory data base.

Returns an object of class \link[mlr3:DataBackend]{mlr3::DataBackend}.
}
\section{Usage}{
\preformatted{# Construction
b = DataBackendDplyr$new(data, primary_key)
b = as_data_backend(data, primary_key)
}

The interface is described in \link[mlr3:DataBackend]{mlr3::DataBackend}.
}

\section{Arguments}{

\itemize{
\item \code{data} [\code{\link[dplyr:tbl]{tbl}}]\cr
See \code{\link[dplyr:tbl]{dplyr::tbl()}} for construction.
Also note that all \code{\link[tibble:tibble]{tibbles}} inherit from \code{tbl}.
\item \code{primary_key} [\code{character(1)}]:\cr
Name of the column in \code{data} which represents a unique row identifier (as integer or character).
}
}

\examples{
# Backend using a in-memory tibble
data = tibble::as.tibble(iris)
data$Sepal.Length[1:30] = NA
data$row_id = 1:150
b = DataBackendDplyr$new(data, primary_key = "row_id")

# Object supports all accessors of DataBackend
print(b)
b$nrow
b$ncol
b$colnames
b$data(rows = 100:101, cols = "Species")
b$distinct("Species")

# Classification task using this backend
task = mlr3::TaskClassif$new(id = "iris_tibble", backend = b, target = "Species")
print(task)
task$head()

# Create a temporary SQLite data base
con = DBI::dbConnect(RSQLite::SQLite(), ":memory:")
dplyr::copy_to(con, data)
tbl = dplyr::tbl(con, "data")

# Define a backend on a subset of the data base
tbl = dplyr::select_at(tbl, setdiff(colnames(tbl), "Sepal.Width")) # do not use column "Sepal.Width"
tbl = dplyr::filter(tbl, row_id \%in\% 1:120) # Use only first 120 rows
b = DataBackendDplyr$new(tbl, primary_key = "row_id")
print(b)

# Query disinct values
b$distinct("Species")

# Query number of missing values
b$missing(b$rownames, b$colnames)

# Note that SQLite does not support factors, column Species has been converted to character
lapply(b$head(), class)

# Cleanup
rm(tbl)
DBI::dbDisconnect(con)
}
